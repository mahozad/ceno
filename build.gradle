import java.nio.file.Files
import java.nio.file.Paths

buildscript {
    ext {
        springBootVersion = '2.1.0.RELEASE'
    }
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

// for gradle to be aware of lombok
plugins {
    id 'io.freefair.lombok' version '4.1.1'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'ir'
version = '0.9.0-SNAPSHOT'
sourceCompatibility = 11

repositories {
    jcenter()
    mavenCentral()
}

wrapper /* task */ {
    // Add a gradle wrapper script to your source folders (by running the wrapper task).
    // The wrapper script when invoked, downloads the defined gradle version, and executes it.
    // By distributing the wrapper with your project, anyone can work with it without needing to install Gradle beforehand
    gradleVersion = '5.5'
}

test /* task */ {
    // Even though Gradle 4.6 (and newer versions) has a native support for JUnit 5,
    // this support is not enabled by default. If we want to enable it,
    // we have to ensure that the test task uses JUnit 5 instead of JUnit 4.
    useJUnitPlatform()
}

task cleanAll {
    doLast {
        Files.deleteIfExists(Paths.get("D:/IdeaProjects/ceno/out"))
        Files.deleteIfExists(Paths.get("D:/IdeaProjects/ceno/build"))
        Files.deleteIfExists(Paths.get("D:/IdeaProjects/ceno/index"))
    }
}

dependencies {
    // compile('org.jcodec:jcodec:0.2.3')
    // compile('org.imgscalr:imgscalr-lib:4.2')
    compile('com.github.ben-manes.caffeine:caffeine')
    compile('com.rometools:rome:1.11.1')
    // required modules deprecated in java 10
    compile('javax.xml.bind:jaxb-api')
    // to resolve error pertaining to "entityManagerFactory" bean. remove this if possible
    compile('org.hibernate:hibernate-core')
    compile('org.hibernate:hibernate-search-orm:5.10.4.Final')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-aop')
    compile('org.springframework.boot:spring-boot-starter-cache')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.thymeleaf.extras:thymeleaf-extras-springsecurity5')
    compile('org.webjars:jquery:3.3.1-1')
    // for automatic versions of webjars (note that this must be webjars-locator-core)
    compile('org.webjars:webjars-locator-core')

    // for custom properties
    compileOnly('org.springframework.boot:spring-boot-configuration-processor')
    compileOnly('org.projectlombok:lombok')

    runtime('org.springframework.boot:spring-boot-devtools')
    runtime('mysql:mysql-connector-java')

    // using h2 database while testing
    testCompile('com.h2database:h2')
    testCompile('org.apache.commons:commons-lang3')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.security:spring-security-test')
    // Junit Jupiter dependencies
    testCompile('org.junit.jupiter:junit-jupiter-api')
    testCompile('org.junit.jupiter:junit-jupiter-engine')
    testCompile('org.junit.jupiter:junit-jupiter-params') // to use @ParameterizedTest
    testCompile('org.junit.platform:junit-platform-launcher')
    testCompile('org.junit.platform:junit-platform-runner')
    testCompile('org.mockito:mockito-junit-jupiter:2.23.0')
    implementation 'com.github.mfathi91:persian-date-time:4.0.0'
}
